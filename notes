IMPORTANT:
1. Upon release, test user, arrays and image must be uploaded!

ceac0e88ac3046c2faee611cb567a43cdd4ce5472acd56b8d9c836c485468b921fed4ab223e5d435ec3a8b9ccefb55a74bc1d968d96c10d7b3c264c79f266879

radek_1a = SoundPreprocessor('radek_1a', test_filename_1)
radek_1b = SoundPreprocessor('radek_1b', test_filename_2)
paulina_1a = SoundPreprocessor('paulina_1a', test_filename_3)
paulina_1b = SoundPreprocessor('paulina_1b', test_filename_4)
inez_1a = SoundPreprocessor('inez_1a', test_filename_5)
inez_1b = SoundPreprocessor('inez_1b', test_filename_6)
krzysztof_1a = SoundPreprocessor('krzysztof_1a', test_filename_7)
krzysztof_1b = SoundPreprocessor('krzysztof_1b', test_filename_8)
maciej_1a = SoundPreprocessor('maciej_1a', test_filename_9)
maciej_1b = SoundPreprocessor('maciej_1b', test_filename_10)
wojtek_1a = SoundPreprocessor('wojtek_1a', test_filename_11)
wojtek_1b = SoundPreprocessor('wojtek_1b', test_filename_12)

radek_1a.convert_stereo_to_mono()
radek_1b.convert_stereo_to_mono()
paulina_1a.convert_stereo_to_mono()
paulina_1b.convert_stereo_to_mono()
inez_1a.convert_stereo_to_mono()
inez_1b.convert_stereo_to_mono()
krzysztof_1a.convert_stereo_to_mono()
krzysztof_1b.convert_stereo_to_mono()
maciej_1a.convert_stereo_to_mono()
maciej_1b.convert_stereo_to_mono()
wojtek_1a.convert_stereo_to_mono()
wojtek_1b.convert_stereo_to_mono()

radek_1a.fourier_transform_audio()
radek_1b.fourier_transform_audio()
paulina_1a.fourier_transform_audio()
paulina_1b.fourier_transform_audio()
inez_1a.fourier_transform_audio()
inez_1b.fourier_transform_audio()
krzysztof_1a.fourier_transform_audio()
krzysztof_1b.fourier_transform_audio()
maciej_1a.fourier_transform_audio()
maciej_1b.fourier_transform_audio()
wojtek_1a.fourier_transform_audio()
wojtek_1b.fourier_transform_audio()

radek_1a.minmax_array_numpy()
radek_1b.minmax_array_numpy()
paulina_1a.minmax_array_numpy()
paulina_1b.minmax_array_numpy()
inez_1a.minmax_array_numpy()
inez_1b.minmax_array_numpy()
krzysztof_1a.minmax_array_numpy()
krzysztof_1b.minmax_array_numpy()
maciej_1a.minmax_array_numpy()
maciej_1b.minmax_array_numpy()
wojtek_1a.minmax_array_numpy()
wojtek_1b.minmax_array_numpy()

radek_1a.save_audio_image()
radek_1b.save_audio_image()
paulina_1a.save_audio_image()
paulina_1b.save_audio_image()
inez_1a.save_audio_image()
inez_1b.save_audio_image()
krzysztof_1a.save_audio_image()
krzysztof_1b.save_audio_image()
maciej_1a.save_audio_image()
maciej_1b.save_audio_image()
wojtek_1a.save_audio_image()
wojtek_1b.save_audio_image()

sound1.plot_audio()
sound2.plot_audio()
sound3.plot_audio()
sound4.plot_audio()

az functionapp create --resource-group v_biometrics_resource_group --os-type Linux --consumption-plan-location westeurope --runtime python --name TestHttpTrigger1 --storage-account vbiometricsstorage

create_voice_image('inez_1', 'src/test_sounds/Inez_1a.wav', 'src/test_sounds/Inez_1b.wav')


test1 = ImagePreprocessor('src/sound_images/inez_1a', 'src/sound_images/inez_1b.png')
test2 = ImagePreprocessor('src/sound_images/inez_1a', 'src/sound_images/paulina_1a.png')
test3 = ImagePreprocessor('src/sound_images/maciej_1a', 'src/sound_images/maciej_1b.png')
test4 = ImagePreprocessor('src/sound_images/maciej_1a', 'src/sound_images/wojtek_1a.png')
test5 = ImagePreprocessor('src/sound_images/wojtek_1a', 'src/sound_images/wojtek_1b.png')
test6 = ImagePreprocessor('src/sound_images/wojtek_1a', 'src/sound_images/radek_1b.png')

upload_voice_array(1, 'src/test_sounds/owsiak_1a.wav')
upload_voice_array(1, 'src/test_sounds/owsiak_1b.wav')
upload_voice_array(2, 'src/test_sounds/owsiak_2a.wav')
upload_voice_array(2, 'src/test_sounds/owsiak_2b.wav')
upload_voice_array(3, 'src/test_sounds/Inez_1a.wav')
upload_voice_array(3, 'src/test_sounds/Inez_1b.wav')
upload_voice_array(4, 'src/test_sounds/Maciej_1a.wav')
upload_voice_array(4, 'src/test_sounds/Maciej_1b.wav')
upload_voice_array(5, 'src/test_sounds/Wojtek_1a.wav')
upload_voice_array(5, 'src/test_sounds/Wojtek_1b.wav')

generate_binary_voice_image(1)
generate_binary_voice_image(2)
generate_binary_voice_image(3)
generate_binary_voice_image(4)
generate_binary_voice_image(5)

/****** Object:  Table [dbo].[Voice_Arrays_List]    Script Date: 07.03.2020 09:14:35 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Voice_Arrays_List](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[user_id] [int] NOT NULL,
	[sample_array] [nvarchar](max) NOT NULL,
	[create_timestamp] [timestamp] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

@staticmethod
    def upload_voice_array(user_id: int, voice_ndarray: object):
        query = f"""INSERT INTO [dbo].[Voice_Arrays_List] (user_id, sample_array)
                    VALUES ({user_id}, '{voice_ndarray}');"""
        try:
            sql_database.execute_update_or_insert(query)
            print(f'Added voice array for user ID: {user_id}')
            return 1
        except pyodbc.ProgrammingError:
            raise pyodbc.ProgrammingError("Something went wrong while executing INSERT statement. Maybe inappropriate "
                                          "data types?")

@staticmethod
    def download_user_voice_arrays(user_id: int):
        """
        input specific user id, and returns and array of ndarrays for further analysis
        :param user_id:
        :return: list
        """
        query = f"""SELECT sample_array FROM [dbo].[Voice_Arrays_List]
                                    WHERE user_id = {user_id};"""
        query_result = sql_database.execute_select(query)

        result_arrays = []
        for each_str in query_result:
            result_arrays.append(each_str.strip('[]\",').split())

        result_list = []
        for each_list in result_arrays:
            new_list = []
            for each_element in each_list:
                new_list.append(float(each_element.strip(',')))
            result_list.append(asarray(new_list))

        return result_list
		
		
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [id]
      ,[user_id]
      ,[sample_array]
      ,[create_timestamp]
  FROM [dbo].[Voice_Arrays_List];

DELETE FROM [dbo].[Voice_Arrays_List];

result1, result2 = _old_verify_voice('crushyna', 'src/test_sounds/owsiak_1b.wav')